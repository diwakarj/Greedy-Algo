#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Understanding Uion find algorithm is little difficult. A good implementation though.


using namespace std;

struct Edge {

	int src, dest;

};


struct Graph {

	int V;
	int E;

	struct Edge *edge;
};


struct Graph* createGraph(int V, int E)
{
	struct Graph *graph = (struct Graph *)malloc(sizeof(struct Graph));
	graph->V = V;
	graph->E = E;

	graph->edge = (struct Edge *)malloc((graph->E)*sizeof(struct Edge));

	return graph;
}


int find(int parent[], int i)
{

	if (parent[i] == -1)
		return i;
	
	return	find(parent, parent[i]);
}

void Union (int parent[], int x, int y)
{

	int xset = find(parent, x);
	int yset = find(parent, y);

	parent[xset] = yset;
}


int isCyclic(struct Graph * graph)
{
	int *parent = (int *)malloc(sizeof(int)*graph->V);

	memset(parent, -1, sizeof(int)*graph->V);

	for (int i = 0; i < graph->E; i++)
	{
		int x = find(parent, graph->edge[i].src);
		int y = find(parent, graph->edge[i].dest);

		if (x == y)
			return 1;
		Union(parent, x, y);

	}
    
	return 0;
}

int main()
{
	struct Graph *graph = createGraph(4, 3);

	graph->edge[0].src = 0;
	graph->edge[0].dest = 1;

	graph->edge[1].src = 1;
	graph->edge[1].dest = 2;

	graph->edge[2].src = 2;
	graph->edge[2].dest = 3;

	if (isCyclic(graph))
		cout << "cycle found" << endl;
	else
		cout << "No cycle found" << endl;

	getchar();

	return 0;

}
